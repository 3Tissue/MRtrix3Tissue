#!/usr/bin/env python

# Script that generates a five-tissue-type (5TT) segmented image: the format appropriate for ACT
#
# In this script, major stages of processing can be performed in one of two ways:
#   - Using FSL tools: BET for brain extraction, FAST for tissue segmentation, FIRST for sub-cortical grey matter segmentation
#   - Using segmentations from FreeSurfer


import argparse, os, sys
import lib.app

import src._5ttgen.fsl
import src._5ttgen.freesurfer

from lib.errorMessage import errorMessage
from lib.runCommand   import runCommand

lib.app.author = 'Robert E. Smith (robert.smith@florey.edu.au)'
lib.app.initCitations([ 'ACT', 'bet', 'fast', 'first', 'FSL' ])
lib.app.initParser('Generate a 5TT image suitable for ACT')

base_parser = lib.app.Parser(description='Arguments & options common to all algorithms', add_help=False, formatter_class=argparse.RawDescriptionHelpFormatter)
base_parser.add_argument('input',  help='The input image (will depend on the algorithm used)')
base_parser.add_argument('output', help='The output 5TT image')
base_parser.add_argument('-nocrop', action='store_true', default=False, help='Do NOT crop the resulting 5TT image to reduce its size (keep the same dimensions as the input image)')

subparsers = lib.app.parser.add_subparsers(title='software options', description='Select the software / algorithm to be used to derive the 5TT image', help='Additional help available for individual software options: Use e.g. ' + os.path.basename(sys.argv[0]) + ' fsl -help')

src._5ttgen.fsl       .initParser(subparsers, base_parser)
src._5ttgen.freesurfer.initParser(subparsers, base_parser)

lib.app.initialise()

lib.app.checkOutputFile(lib.app.args.output)
src._5ttgen.fsl       .checkOutputFiles()
src._5ttgen.freesurfer.checkOutputFiles()

runCommand('mrconvert ' + lib.app.args.input + ' ' + os.path.join(lib.app.tempDir, 'input.mif') + ' -stride +1,+2,+3')
src._5ttgen.fsl       .getInputFiles()
src._5ttgen.freesurfer.getInputFiles()

lib.app.gotoTempDir()

if lib.app.args.algorithm == 'fsl':
  src._5ttgen.fsl.execute()
elif lib.app.args.algorithm == 'freesurfer':
  src._5ttgen.freesurfer.execute()
else:
  errorMessage('No valid software / algorithm selected')

runCommand('mrconvert result.mif ' + os.path.join(lib.app.workingDir, lib.app.args.output) + lib.app.mrtrixForce)
lib.app.complete()

