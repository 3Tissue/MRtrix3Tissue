#!/usr/bin/python2

# Script that receives as argument a T1-weighted image, and outputs a four-tissue-type (4TT) segmented image
# in a format appropriate for ACT
# In this script, all major stages of processing are performed using FSL tools:
# BET for brain extraction, FAST for tissue segmentation, FIRST for sub-cortical grey matter segmentation


import os, shutil, sys

from lib.binaryInPath import binaryInPath
from lib.delTempDir   import delTempDir
from lib.errorMessage import errorMessage
from lib.getFSLSuffix import getFSLSuffix
from lib.loadOptions  import loadOptions
from lib.makeTempDir  import makeTempDir
from lib.printMessage import printMessage
from lib.runCommand   import runCommand

num_args = 2

if len(sys.argv) < num_args+1:
  errorMessage('Usage: ' + os.path.basename(sys.argv[0]) + ' <input image> <output image>')

fsl_path = os.environ.get('FSLDIR', '')
if not fsl_path:
  errorMessage('Environment variable FSLDIR is not set; please run appropriate FSL configuration script')

bet_cmd = 'bet'
if not binaryInPath(bet_cmd):
  bet_cmd = 'fsl5.0-bet'
  if not binaryInPath(bet_cmd):
    errorMessage('Could not find FSL program bet; please verify FSL install')

fast_cmd = 'fast'
if not binaryInPath(fast_cmd):
  fast_cmd = 'fsl5.0-fast'
  if not binaryInPath(fast_cmd):
    errorMessage('Could not find FSL program fast; please verify FSL install')

first_cmd = 'run_first_all'
if not binaryInPath(first_cmd):
  first_cmd = "fsl5.0-run_first_all"
  if not binaryInPath(first_cmd):
    errorMessage('Could not find FSL program run_first_all; please verify FSL install')

first_atlas_path = os.path.join(fsl_path, 'data', 'first', 'models_336_bin')

if not os.path.isdir(first_atlas_path):
  errorMessage('Atlases required for FSL\'s FIRST program not installed;\nPlease install fsl-first-data using your relevant package manager')

(quiet, verbose) = loadOptions(num_args)

fsl_suffix = getFSLSuffix()

working_dir = os.getcwd()
temp_dir = makeTempDir(verbose)


sgm_structures = [ 'L_Accu', 'R_Accu', 'L_Caud', 'R_Caud', 'L_Pall', 'R_Pall', 'L_Puta', 'R_Puta', 'L_Thal', 'R_Thal' ]

# Start by cropping the inferior quarter of the image and putting it in the correct format for FSL
runCommand('mrcrop ' + sys.argv[1] + ' - -axis 2 64 255' + quiet + ' | mrconvert - ' + os.path.join(temp_dir, 'T1.nii') + ' -stride +1,+2,+3' + quiet, verbose)

if verbose:
  printMessage('Changing to temporary directory (' + temp_dir + ')')
os.chdir(temp_dir)

# BET
runCommand(bet_cmd + ' T1.nii T1_bet.' + fsl_suffix + ' -f 0.25 -R', verbose)

# FAST
runCommand(fast_cmd + ' T1_bet.' + fsl_suffix, verbose)

# FIRST
runCommand(first_cmd + ' -s ' + ','.join(sgm_structures) + ' -i T1.nii -o first', verbose)

# Convert FIRST meshes to partial volume images
pve_image_list = [ ]
for struct in sgm_structures:
  pve_image_path = 'mesh2pve_' + struct + '.nii'
  runCommand('mesh2pve first-' + struct + '_first.vtk T1.nii ' + pve_image_path + ' -first T1.nii' + quiet, verbose)
  pve_image_list.append(pve_image_path)
pve_cat = ' '.join(pve_image_list)
runCommand('mrcat ' + pve_cat + ' - -axis 3' + quiet + ' | mrmath - sum 3 -' + quiet + ' | mrcalc - 1.0 -min all_sgms.nii' + quiet, verbose)

# Combine all tissue types using the mr4ttmake command
# Looks like FAST in 5.0 ignores FSLOUTPUTTYPE when writing the PVE images
# Will have to wait and see whether this changes, and update the script accordingly
if fast_cmd == 'fast':
  fast_suffix = fsl_suffix
else:
  fast_suffix = 'nii.gz'
runCommand('mr4ttmake T1_bet_pve_0.' + fast_suffix + ' T1_bet_pve_1.' + fast_suffix + ' T1_bet_pve_2.' + fast_suffix + ' all_sgms.nii combined_precrop.mif' + quiet, verbose)

# Use mrcrop to reduce file size (improves caching of image data during tracking)
runCommand('mrmath combined_precrop.mif sum 3 -' + quiet + ' | mrthreshold - - -abs 0.5' + quiet + ' | mrcrop combined_precrop.mif ' + os.path.basename(sys.argv[2]) + ' -mask -' + quiet, verbose)

# Move back to original directory
if verbose:
  printMessage('Changing back to original directory (' + working_dir + ')')
os.chdir(working_dir)

# Get the final file from the temporary directory & put it in the correct location
if verbose:
  printMessage('Moving output file from temporary directory to user specified location')
shutil.move(os.path.join(temp_dir, os.path.basename(sys.argv[2])), sys.argv[2])

# Don't leave a trace
delTempDir(temp_dir, verbose)

