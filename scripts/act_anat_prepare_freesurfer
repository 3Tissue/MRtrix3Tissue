#!/usr/bin/python2

# Script that receives as argument a segmented T1 image from FreeSurfer, and outputs
#   a four-tissue-type (4TT) segmented image in a format appropriate for ACT
# Note that there are many structures that FreeSurfer does not segment, and therefore the
#   tracking behaviour may not be as expected

# Any of the following images generated using FreeSurfer's recon-all should work using this script:
# aseg.mgz (recommended)
# aparc.a2009s+aseg.mgz
# aparc+aseg.mgz
# aseg.auto.mgz
# aseg.auto_noCCseg.mgz


import os, shutil, sys

from lib.binaryInPath import binaryInPath
from lib.delTempDir   import delTempDir
from lib.errorMessage import errorMessage
from lib.loadOptions  import loadOptions
from lib.makeTempDir  import makeTempDir
from lib.printMessage import printMessage
from lib.runCommand   import runCommand

num_args = 2

if len(sys.argv) < num_args+1:
  errorMessage('Usage: ' + os.path.basename(sys.argv[0]) + ' <input freesurfer parcellated image> <output image>')

config_file_name = 'FreeSurfer2ACT.txt'

freesurfer_home = os.environ.get('FREESURFER_HOME', '')
if not freesurfer_home:
  errorMessage('Environment variable FREESURFER_HOME is not set; please run appropriate FreeSurfer configuration script or set manually')

freesurfer_lut = os.path.join(freesurfer_home, 'FreeSurferColorLUT.txt')
if not os.path.isfile(freesurfer_lut):
  errorMessage('Could not find FreeSurfer lookup table file\n(Expected location: ' + freesurfer_lut + ')')

config_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data', config_file_name);
if not os.path.isfile(config_path):
  errorMessage('Could not find config file for converting FreeSurfer parcellation output to tissues\n(Expected location: ' + config_path + ')')

(quiet, verbose) = loadOptions(num_args)

working_dir = os.getcwd()
temp_dir = makeTempDir(verbose)


# Initial conversion from FreeSurfer parcellation to four principal tissue types
runCommand('mrprep4connectome ' + sys.argv[1] + ' ' + config_path + ' ' + os.path.join(temp_dir, 'indices_precrop.mif') + ' -lut_freesurfer ' + freesurfer_lut + quiet, verbose)

if verbose:
  printMessage('Changing to temporary directory (' + temp_dir + ')')
os.chdir(temp_dir)

# Use mrcrop to reduce file size
runCommand('mrthreshold indices_precrop.mif - -abs 0.5' + quiet + ' | mrcrop indices_precrop.mif indices.mif -mask -' + quiet, verbose)

# Convert into the 4TT format for ACT
runCommand('mrmath indices.mif 1 -eq cgm.mif' + quiet, verbose)
runCommand('mrmath indices.mif 2 -eq sgm.mif' + quiet, verbose)
runCommand('mrmath indices.mif 3 -eq  wm.mif' + quiet, verbose)
runCommand('mrmath indices.mif 4 -eq csf.mif' + quiet, verbose)
runCommand('mrcat cgm.mif sgm.mif wm.mif csf.mif ' + os.path.basename(sys.argv[2]) + ' -axis 3' + quiet, verbose)

# Move back to original directory
if verbose:
  printMessage('Changing back to original directory (' + working_dir + ')')
os.chdir(working_dir)

# Get the final file from the temporary directory & put it in the correct location
if verbose:
  printMessage('Moving output file from temporary directory to user specified location')
shutil.move(os.path.join(temp_dir, os.path.basename(sys.argv[2])), sys.argv[2])

# Don't leave a trace
delTempDir(temp_dir, verbose)

