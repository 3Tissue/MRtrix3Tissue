#!/usr/bin/env python

# Generates an unbiased group-average template via image registration of images to a midway space.

import os, shutil, sys
import lib.app
import numpy
import math

def abspath(*arg):
  return os.path.abspath(os.path.join(*arg))

def relpath(*arg):
  return os.path.relpath(os.path.join(*arg),lib.app.workingDir)

def allindir(dir):
  return ' '.join( [ os.path.join(dir, file) for file in os.listdir(dir) ] )

from lib.errorMessage  import errorMessage
from lib.getHeaderInfo import getHeaderInfo
from lib.getUserPath   import getUserPath
from lib.printMessage  import printMessage
from lib.runCommand    import runCommand
from lib.warnMessage   import warnMessage

class Input:
  def __init__(self, filename, prefix, directory, mask_filename = '', mask_directory = ''):
    self.filename = filename
    self.prefix = prefix
    self.directory = directory
    self.mask_filename = mask_filename
    self.mask_directory = mask_directory



lib.app.author = 'David Raffelt (david.raffelt@florey.edu.au) & Max Pietsch (maximilian.pietsch@kcl.ac.uk) & Thijs Dhollander thijs.dhollander@florey.edu.au)'
lib.app.initParser('Generates an unbiased group-average template from a series of images. First a template is optimised with linear registration (rigid or affine, affine is default), then non-linear registration is used to optimise the template further.')
lib.app.parser.add_argument('input_dir', help='The input directory containing all images used to build the template')
lib.app.parser.add_argument('template', help='The output template image')
lib.app.parser.add_argument('-mask_dir', help='Optionally input a set of masks inside a single directory, one per input image (with the same file name prefix). Using masks will speed up registration significantly')
lib.app.parser.add_argument('-warp_dir', help='Output a directory containing warps from each input to the template. If the folder does not exist it will be created')
lib.app.parser.add_argument('-transformed_dir', help='Output a directory containing the input images transformed to the template. If the folder does not exist it will be created')
lib.app.parser.add_argument('-template_mask', help='Output a template mask. Only works in -mask_dir has been input. The template mask is computed as the intersection of all subject masks in template space.')
lib.app.parser.add_argument('-rigid', action='store_true', help='perform rigid registration instead of affine. This should be used for intra-subject registration in longitudinal analysis')
lib.app.parser.add_argument('-linear_scale', help='Specifiy the multi-resolution pyramid used to build the rigid or affine template, in the form of a list of scale factors (default: 0.3,0.4,0.5,0.6,0.7,1.0,1.0,1.0,1.0,1.0). This implicitly defines the number of template levels')
lib.app.parser.add_argument('-linear_lmax', help='Specifiy the lmax used for rigid or affine registration for each scale factor, in the form of a list of integers (default: 2,2,2,2,2,2,4,4,4,4). The list must be the same length as the affine_scale factor list')
lib.app.parser.add_argument('-linear_niter', help='Specifiy the number of registration iterations used within each level before updating the template, in the form of a list of integers (default:500 for each scale). The must be a single number or a list of same length as the linear_scale factor list')
lib.app.parser.add_argument('-nl_scale', help='Specifiy the multi-resolution pyramid used to build the non-linear template, in the form of a list of scale factors (default: 0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0). This implicitly defines the number of template levels')
lib.app.parser.add_argument('-nl_lmax', help='Specifiy the lmax used for non-linear registration for each scale factor, in the form of a list of integers (default: 0,0,2,2,2,2,2,2,2,2,4,4,4,4). The list must be the same length as the nl_scale factor list')
lib.app.parser.add_argument('-nl_niter', help='Specifiy the number of registration iterations used within each level before updating the template, in the form of a list of integers (default:5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5). The list must be the same length as the nl_scale factor list')
lib.app.parser.add_argument('-nl_update_smooth', default='2.0', help='Regularise the gradient update field with Gaussian smoothing (standard deviation in voxel units, Default 2.0 x voxel_size)')
lib.app.parser.add_argument('-nl_disp_smooth', default='1.0', help='Regularise the displacement field with Gaussian smoothing (standard deviation in voxel units, Default 1.0 x voxel_size)')
lib.app.parser.add_argument('-nl_grad_step', default='0.5', help='The gradient step size for non-linear registration (Default: 0.5)')
lib.app.parser.add_argument('-noreorientation', action='store_true', help='Turn off FOD reorientation in mrregister. Reorientation is on by default if the number of volumes in the 4th dimension corresponds to the number of coefficients in an antipodally symmetric spherical harmonic series (i.e. 6, 15, 28, 45, 66 etc')
lib.app.parser.add_argument('-initial_alignment', default='mass', help='Method of alignment to form the initial template. Options are "mass" (default), "geometric" and "none".')
lib.app.initialise()

lib.app.args.input_dir = relpath(lib.app.args.input_dir)
inputDir = lib.app.args.input_dir
if not os.path.exists(inputDir):
  errorMessage('input directory not found');
inFiles = os.listdir(inputDir)
if len(inFiles) <= 1:
  printMessage('Not enough images found in input directory. More than one image is needed to generate a population template')
else:
  printMessage('Generating a population-average template from ' + str(len(inFiles)) + ' input images')

initial_alignment = lib.app.args.initial_alignment
if initial_alignment not in ["mass", "geometric", "none"]:
  errorMessage('initial_alignment must be one of ' + " ".join(["mass", "geometric", "none"]));

useMasks = False
if lib.app.args.mask_dir:
  useMasks = True
  lib.app.args.mask_dir = relpath(lib.app.args.mask_dir);
  maskDir = lib.app.args.mask_dir
  if not os.path.exists(maskDir):
    errorMessage('mask directory not found')
  maskFiles = os.listdir(maskDir)
  if len(maskFiles) < len(inFiles):
    errorMessage('there are not enough mask images for the number of images in the input directory')
  maskCommonPostfix = lib.app.getCommonPostfix(maskFiles)
  maskPrefixes = []
  for m in maskFiles:
    maskPrefixes.append(m.split(maskCommonPostfix)[0])

if not useMasks:
  warnMessage('no masks input. Use input masks to reduce computation time and improve robustness')

if lib.app.args.template_mask and not useMasks:
  errorMessage('you cannot output a template mask because no subject masks were input using -mask_dir')

commonPostfix = lib.app.getCommonPostfix(inFiles)
input = []
for i in inFiles:
  prefix = i.split(commonPostfix)[0]
  if useMasks:
    if prefix not in maskPrefixes:
      errorMessage ('no matching mask image was found for input image ' + i)
    index = maskPrefixes.index(prefix)
    input.append(Input(i, prefix, lib.app.workingDir + '/' + inputDir + '/', maskFiles[index], lib.app.workingDir + '/' + maskDir + '/'))
  else:
    input.append(Input(i, prefix, lib.app.workingDir + '/' + inputDir + '/'))


noreorientation = lib.app.args.noreorientation
dorigid = lib.app.args.rigid

lib.app.args.template = relpath(lib.app.args.template)
lib.app.checkOutputFile(lib.app.args.template)

if lib.app.args.warp_dir:
  lib.app.args.warp_dir = relpath(lib.app.args.warp_dir)
  lib.app.checkOutputFile(lib.app.args.warp_dir)

if lib.app.args.transformed_dir:
  lib.app.args.transformed_dir = relpath(lib.app.args.transformed_dir)
  lib.app.checkOutputFile(lib.app.args.transformed_dir)

# automatically detect SH series
do_fod_registration = False
image_size = [int(x) for x in getHeaderInfo(relpath(input[0].directory, input[0].filename), 'size').split(' ')]
if len(image_size) < 3 or len(image_size) > 4:
  errorMessage('only 3 and 4 dimensional images can be used to build a template')
if len(image_size) == 4:
  val = (math.sqrt (1 + 8 * image_size[3]) - 3.0) / 4.0;
  if not (val - int(val)) and not noreorientation:
    printMessage("SH Series detected, performing FOD registration")
    do_fod_registration = True

linear_scales = [0.3,0.4,0.5,0.6,0.7,1.0,1.0,1.0,1.0,1.0]
linear_lmax =   [0,  0,  0,  0,  2,  2,  2,  2,  2,  2]
if lib.app.args.linear_scale:
  linear_scales = [float(x) for x in lib.app.args.linear_scale.split(',')]
if lib.app.args.linear_lmax:
  linear_lmax = [int(x) for x in lib.app.args.linear_lmax.split(',')]
linear_niter =   [500] * len(linear_scales)
if lib.app.args.linear_niter:
  linear_niter = [int(x) for x in lib.app.args.linear_niter.split(',')]
  if len(linear_niter) == 1:
    linear_niter = linear_niter * len(linear_scales)
  elif len(linear_scales) != len(linear_niter):
      errorMessage('linear_scales and linear_niter schedules are not equal in length')

if do_fod_registration:
  if len(linear_scales) != len(linear_lmax):
    errorMessage('linear_scales and linear_lmax schedules are not equal in length')

nl_scales = [0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]
nl_niter =  [5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5  ,5  ,5  ,5  ,5  ]
nl_lmax =   [2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4  ,4  ,4  ,4  ,4  ]
datatype = ' -datatype float32'

if lib.app.args.nl_scale:
  nl_scales = [float(x) for x in lib.app.args.nl_scale.split(',')]
if lib.app.args.nl_niter:
  nl_niter = [int(x) for x in lib.app.args.nl_niter.split(',')]
if lib.app.args.nl_lmax:
  nl_lmax = [int(x) for x in lib.app.args.nl_lmax.split(',')]


if len(nl_scales) != len(nl_niter):
  errorMessage('nl_scales and nl_niter schedules are not equal in length')

if do_fod_registration:
  if len(nl_scales) != len(nl_lmax):
    errorMessage('nl_scales and nl_lmax schedules are not equal in length')

lib.app.gotoTempDir()

lib.app.make_dir('input_transformed')
lib.app.make_dir('linear_transforms')
if useMasks:
  lib.app.make_dir('masks_transformed')
if lib.app.args.verbose:
  lib.app.make_dir('log')



# Make initial template in average space
printMessage('Generating initial template')
input_filenames = []
for i in input:
  input_filenames.append (abspath(i.directory, i.filename));
runCommand('mraverageheader ' + ' '.join(input_filenames) + ' average_header.mif' ' -fill')

# crop average space to extent defined by original masks
if useMasks:
  mask_filenames = []
  for i in input:
    runCommand('mrtransform ' + abspath(i.mask_directory, i.mask_filename) +
      ' -interp nearest -template average_header.mif masks_transformed/' + i.mask_filename)
    mask_filenames.append('masks_transformed/' + i.mask_filename)
  runCommand('mrmath ' + ' '.join(mask_filenames) + ' max mask_initial.mif' )
  runCommand('mrcrop ' + 'average_header.mif -mask mask_initial.mif average_header_cropped.mif')
  runCommand('rm -f mask_initial.mif')
  runCommand('rm -f average_header.mif')
  runCommand('mv average_header_cropped.mif average_header.mif')
  for mask in mask_filenames:
    runCommand('rm ' + mask)


if initial_alignment == 'none':
  for i in input:
    runCommand('mrtransform ' + abspath(i.directory, i.filename) + ' -interp linear -template average_header.mif input_transformed/' + i.prefix + '.mif' + datatype)
else:
  mask = ''
  for i in input:
    if useMasks:
      mask = ' -mask1 ' + abspath(i.mask_directory, i.mask_filename)
    output = ' -rigid linear_transforms/' + i.prefix + '.txt'
    runCommand('mrregister ' + abspath(i.directory, i.filename) + ' average_header.mif' +
                mask +
                ' -rigid_scale 1 ' +
                ' -rigid_niter 0 ' +
                ' -type rigid ' +
                ' -noreorientation ' +
                ' -rigid_init_translation ' + initial_alignment + ' ' +
                datatype +
                output)
    # translate input images to centre of mass without interpolation
    runCommand('mrtransform ' + abspath(i.directory, i.filename) +
                ' -linear linear_transforms/' + i.prefix + '.txt' +
                datatype +
                ' input_transformed/' + i.prefix + '_translated.mif')
    if useMasks:
      runCommand('mrtransform ' + abspath(i.mask_directory, i.mask_filename) +
             ' -linear linear_transforms/' + i.prefix + '.txt' +
             datatype +
             ' masks_transformed/' + i.prefix + '_translated.mif')
  # update average space to new extent
  runCommand('mraverageheader ' + ' '.join(['input_transformed/' + i.prefix + '_translated.mif' for i in input]) + ' average_header_tight.mif')
  runCommand('mrpad -uniform 10 average_header_tight.mif average_header.mif -force')
  runCommand('rm -f average_header_tight.mif')
  if useMasks:
    # reslice masks
    for i in input:
      runCommand('mrtransform ' +
               ' masks_transformed/' + i.prefix + '_translated.mif' +
               ' masks_transformed/' + i.prefix + '.mif' +
               ' -interp nearest -template average_header.mif' +
               datatype)
    # crop average space to extent defined by translated masks
    mask_filenames = []
    for i in input:
      mask_filenames.append('masks_transformed/' + i.prefix + '.mif')
    runCommand('mrmath ' + ' '.join(mask_filenames) + ' max mask_translated.mif' )
    runCommand('rm -f mask_translated_smooth.mif')
    runCommand('mrcrop ' + 'average_header.mif -mask mask_translated.mif average_header_cropped.mif')
    # pad average space to allow for deviation from centre of mass alignment
    runCommand('mrpad -uniform 10 average_header_cropped.mif -force average_header.mif')
    runCommand('rm -f average_header_cropped.mif')
    for i in input:
      runCommand('mrtransform ' +
                 ' masks_transformed/' + i.prefix + '_translated.mif' +
                 ' masks_transformed/' + i.prefix + '.mif' +
                 ' -interp nearest -template average_header.mif' +
                 datatype +
                 ' -force')
      runCommand('rm -f masks_transformed/' + i.prefix + '_translated.mif')
    runCommand('rm -f mask_translated.mif')
  # reslice input images
  for i in input:
    runCommand('mrtransform ' +
               ' input_transformed/' + i.prefix + '_translated.mif' +
               ' input_transformed/' + i.prefix + '.mif' +
               ' -interp linear -template average_header.mif' +
               datatype)
    runCommand('rm -f input_transformed/' + i.prefix + '_translated.mif')


runCommand('mrmath ' + allindir('input_transformed') + ' mean initial_template.mif')
current_template = 'initial_template.mif'


# Optimise template with linear registration
printMessage('Optimising template with linear registration')
for level in range(0, len(linear_scales)):
  for i in input:
    initialise = ''
    if useMasks:
      mask = ' -mask1 ' + abspath(i.mask_directory, i.mask_filename)
    else:
      mask = ''
    lmax = ''
    mrregister_log = ''
    if dorigid:
      scale = ' -rigid_scale ' + str(linear_scales[level])
      niter = ' -rigid_niter ' + str(linear_niter[level])
      regtype = ' -type rigid'
      output = ' -rigid linear_transforms/' + i.prefix + '.txt'
      if level > 0:
        initialise = ' -rigid_init_matrix linear_transforms/' + i.prefix + '.txt'
      if do_fod_registration:
        lmax = ' -rigid_lmax ' + str(linear_lmax[level])
      else:
        lmax = ' -noreorientation'
      if lib.app.args.verbose:
        mrregister_log = ' -info -rigid_log ' + 'log/' + i.filename + "_" + str(level) + '.log'
    else:
      scale = ' -affine_scale ' + str(linear_scales[level])
      niter = ' -affine_niter ' + str(linear_niter[level])
      regtype = ' -type affine'
      output = ' -affine linear_transforms/' + i.prefix + '.txt'
      if level > 0:
        initialise = ' -affine_init_matrix linear_transforms/' + i.prefix + '.txt'
      if do_fod_registration:
        lmax = ' -affine_lmax ' + str(linear_lmax[level])
      else:
        lmax = ' -noreorientation'
      if lib.app.args.verbose:
        mrregister_log = ' -info -affine_log ' + 'log/' + i.filename + "_" + str(level) + '.log'


    runCommand('mrregister ' + abspath(i.directory, i.filename) + ' ' + current_template +
               ' -force' +
                 initialise +
                 mask +
                 scale +
                 niter +
                 lmax +
                 regtype +
                 datatype +
                 output +
                 mrregister_log)

  # Here we ensure the template doesn't drift or scale
  runCommand('transformcalc ' + allindir('linear_transforms') + ' average linear_transform_average.txt -force -quiet')
  if dorigid:
    runCommand('transformcalc linear_transform_average.txt rigid linear_transform_average.txt -force -quiet')
  runCommand('transformcalc linear_transform_average.txt invert linear_transform_average_inv.txt -force -quiet')
  average_inv = numpy.loadtxt('linear_transform_average_inv.txt')
  for i in input:
    transform = numpy.loadtxt('linear_transforms/' + i.prefix + '.txt').dot(average_inv)
    numpy.savetxt('linear_transforms/' + i.prefix + '.txt', transform)

  for i in input:
    runCommand('mrtransform ' + abspath(i.directory, i.filename) +
               ' -template ' + current_template +
               ' -linear linear_transforms/' + i.prefix + '.txt' +
               ' input_transformed/' + i.prefix + '.mif' +
               datatype +
               ' -force')

  runCommand ('mrmath ' + allindir('input_transformed') + ' mean linear_template' + str(level) + '.mif -force')
  current_template = 'linear_template' + str(level) + '.mif'


# Create a template mask for nl registration by taking the intersection of all transformed input masks and dilating
  if useMasks:
    for i in input:
      runCommand('mrtransform ' + abspath(i.mask_directory, i.mask_filename) +
                 ' -template ' + current_template +
                 ' -interp nearest' +
                 ' -linear linear_transforms/' + i.prefix + '.txt' +
                 ' masks_transformed/' + i.prefix + '.mif' +
                 ' -force')
    runCommand ('mrmath ' + allindir('masks_transformed') + ' min - | maskfilter - median - | maskfilter - dilate -npass 5 init_nl_template_mask.mif -force')
    current_template_mask = 'init_nl_template_mask.mif'


# Optimise the template with non-linear registration
printMessage('Optimising template with non-linear registration')
lib.app.make_dir('warps')
for level in range(0, len(nl_scales)):
  for i in input:
    if level > 0:
      initialise = ' -nl_init warps/' + i.prefix + '.mif'
      scale = ''
    else:
      scale = ' -nl_scale ' + str(nl_scales[level])
      if dorigid:
        initialise = ' -rigid_init_matrix linear_transforms/' + i.prefix + '.txt'
      else:
        initialise = ' -affine_init_matrix linear_transforms/' + i.prefix + '.txt'

    if useMasks:
      mask = ' -mask1 ' + abspath(i.mask_directory, i.mask_filename) + ' -mask2 ' + current_template_mask
    else:
      mask = ''

    if do_fod_registration:
      lmax = ' -nl_lmax ' + str(nl_lmax[level])
    else:
      lmax = ' -noreorientation'

    runCommand('mrregister ' + abspath(i.directory, i.filename) + ' ' + current_template +
               ' -type nonlinear' +
               ' -nl_niter ' + str(nl_niter[level]) +
               ' -nl_warp_full warps/' + i.prefix + '.mif' +
               ' -transformed input_transformed/' + i.prefix + '.mif' +
               ' -nl_update_smooth ' +  lib.app.args.nl_update_smooth +
               ' -nl_disp_smooth ' +  lib.app.args.nl_disp_smooth +
               ' -nl_grad_step ' +  lib.app.args.nl_grad_step +
               ' -force ' +
                 initialise +
                 scale +
                 mask +
                 datatype +
                 lmax)
    if useMasks:
      runCommand('mrtransform ' + abspath(i.mask_directory, i.mask_filename) +
                 ' -template ' + current_template +
                 ' -warp_full warps/' + i.prefix + '.mif' +
                 ' masks_transformed/' + i.prefix + '.mif' +
                 ' -interp nearest ' +
                 ' -force')

  runCommand ('mrmath ' + allindir('input_transformed') + ' mean nl_template' + str(level) + '.mif')
  current_template = 'nl_template' + str(level) + '.mif'

  if useMasks:
    runCommand ('mrmath ' + allindir('masks_transformed') + ' min - | maskfilter - median - | maskfilter - dilate -npass 5 nl_template_mask' + str(level) + '.mif')
    current_template_mask = 'nl_template_mask' + str(level) + '.mif'

  if level < len(nl_scales) - 1:
    if (nl_scales[level] < nl_scales[level + 1]):
      upsample_factor = nl_scales[level + 1] / nl_scales[level]
      for i in input:
        runCommand('mrresize warps/' + i.prefix + '.mif -scale ' + str(upsample_factor) + ' tmp.mif')
        runCommand('mv tmp.mif warps/' + i.prefix + '.mif')


runCommand('mrconvert ' + current_template + ' ' + getUserPath(lib.app.args.template, True) + lib.app.mrtrixForce)

if lib.app.args.warp_dir:
  warp_path = getUserPath(lib.app.args.warp_dir, False)
  if os.path.exists(warp_path):
    shutil.rmtree(warp_path)
  shutil.copytree('warps/', warp_path)

if lib.app.args.transformed_dir:
  transformed_path = getUserPath(lib.app.args.transformed_dir, False)
  if os.path.exists(transformed_path):
    shutil.rmtree(transformed_path)
  shutil.copytree('input_transformed/', transformed_path)

if lib.app.args.template_mask:
  runCommand('mrconvert ' + current_template_mask + ' ' + getUserPath(lib.app.args.template_mask, True) + lib.app.mrtrixForce)

lib.app.complete()

