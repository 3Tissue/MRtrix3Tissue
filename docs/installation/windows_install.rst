=============
Windows installation
=============


We outline the steps for installing *MRtrix3* for Windows using `MSYS2 <http://sourceforge.net/p/msys2/wiki/MSYS2%20introduction/>`__. 
Please consult :ref:`windows_trouble_shooting` if you encounter any issues with the configure, build
or runtime operations of *MRtrix3*.

.. WARNING::
    Some of the Python scripts provided with *MRtrix3* are dependent on
    external software tools (for instance FSL). If these packages are
    not available on Windows, then the corresponding *MRtrix3* scripts
    also cannot be run on Windows. A virtual machine may therefore be
    required in order to use these particular scripts; though *MRtrix3*
    may still be installed natively on Windows for other tasks.

Check requirements
------------------

To install *MRtrix3*, you will need the following:

-  a `C++11 <https://en.wikipedia.org/wiki/C%2B%2B11>`__ compliant
   compiler
-  `Python <https://www.python.org/>`__ version >= 2.6
-  `NumPy <http://www.numpy.org/>`__
-  The `zlib <http://www.zlib.net/>`__ compression library
-  `Eigen <http://eigen.tuxfamily.org>`__ version 3.2 *(do not install the beta version)*
-  `Qt <http://www.qt.io/>`__ version >= 4.7 *[GUI components only]*

.. NOTE::
    All of these dependencies are installed below by the MSYS2 package manager.

.. WARNING:: 
    To run the GUI components of *MRtrix3* (``mrview`` & ``shview``), you will also need:

    -  an `OpenGL <https://en.wikipedia.org/wiki/OpenGL>`__ 3.3 compliant graphics card and corresponding software driver 

.. WARNING:: 
    When following the instructions below, use the **'MinGW-w64 Win64 shell'**; 'MSYS2 shell' and 'MinGW-w64 Win32 shell' should be avoided.

Install and update MSYS2
------------------------

1. Download and install the most recent 64-bit MSYS2 installer from
   http://msys2.github.io/ (msys2-x86\_64-\*.exe).

2. Run the program **'MinGW-w64 Win64 Shell'** from the start menu.

3. Update the system packages:

   ::

       update-core
   
   .. NOTE::
    Future versions of MSYS2 will drop ``update-core``. If your version came without ``update-core``, it is probably safe to skip this step.

.. WARNING::
    At time of writing, this MSYS2 system update will give a number of instructions, including: terminating the terminal when the update is
    completed, and modifying the shortcuts for executing the shell(s). Although these instructions are not as prominent as they could be,
    it is *vital* that they are followed correctly!

4. Close the shell and start **'MinGW-w64 Win64 Shell'**
   
5. Update the other packages:

   ::

       pacman -Su

Install *MRtrix3* dependencies
----------------------------

1. From the **'MinGW-w64 Win64 Shell'** run:

   ::

       pacman -S git mingw-w64-x86_64-python3 mingw-w64-x86_64-python3-numpy pkg-config mingw-w64-x86_64-gcc mingw-w64-x86_64-eigen3 mingw-w64-x86_64-qt5
    
   Sometimes ``pacman`` may fail to find a particular package from any of
   the available mirrors. If this occurs, you can download the relevant
   package from `SourceForge <https://sourceforge.net/projects/msys2/files/REPOS/MINGW/x86_64/>`__:
   place both the package file and corresponding .sig file into the
   ``/var/cache/pacman/pkg`` directory, and repeat the ``pacman`` call above.

Set up git and download *MRtrix3* sources
---------------------------------------

1. Configure global settings for Git in the **'MinGW-w64 Win64 Shell'**:

   ::

       git config --global user.name "John Doe"
       git config --global user.email johndoe@example.com
       git config --global push.default upstream

2. Clone the *MRtrix3* repository:

   ::

       git clone https://github.com/MRtrix3/mrtrix3.git

Build *MRtrix3*
-------------

1. Configure the *MRtrix3* install:

   ::

       cd mrtrix3
       ./configure

   If this does not work, examine the 'configure.log' file that is
   generated by this step, it may give clues as to what went wrong.

2. Build the binaries:

   ::

       ./build

Set up *MRtrix3*
--------------

1. Set your PATH in the shell startup file: run the following snippet *from
   the MRtrix3 root directory*:

   ::

       echo "export PATH=\"$(pwd)/release/bin:$(pwd)/scripts:\$PATH\"" >> ~/.bashrc

   .. WARNING::
       The command above will *add* an extra line to the relevant file. If you
       encounter an issue running the snippet above, or step 3 below does not
       work, you should *not* re-attempt the command above again, since this
       will only add yet another line, leaving the previous (potentially
       problematic) line in place. Instead, open the ``~/.bashrc`` file in a
       text editor and modify it directly. The simplest option is to remove
       the line previously added, and manually add the necessary line: For
       instance, if you have installed *MRtrix3* to
       `/c/msys2/home/name/mrtrix3`, you would add the following line to the
       file ``~/.bashrc`` (amend with your actual installation path):

         export PATH=/c/msys2/home/name/mrtrix3/release/bin:/c/msys2/home/name/mrtrix3/scripts:$PATH

       Any text editor will be suitable for this provided it supports
       Unix-style newlines (this rules out the ``Notepad`` application available
       on Windows by default). If you need to edit this file (or any other text
       file), we recommend you install ``nano``::

         pacman -S nano

       , after which you can edit the ``~/.bashrc`` file::

         nano -w ~/.bashrc

       Although ``nano`` is a terminal-based editor and does not have a full
       graphical interface, it is not too difficult to use. Simply delete and
       add text as required; use Ctrl+O to output the file (press enter to
       confirm overwriting the existing file); Ctrl-X exits.

2. Close the terminal and start another one to ensure the startup file
   is read

3. Type ``mrview`` to check that everything works

4. You may also want to have a look through the :ref:`mrtrix_config_options`, and set anything you think
   might be required on your system.

Keeping *MRtrix3* up to date
--------------------------

1. You can update your installation at any time by typing:

   ::

       git pull
       ./build

2. If this doesn't work immediately, it may be that you need to re-run
   the configure script:

   ::

       ./configure

   and re-run step 1 again.

Compiling external projects with ``msys2``
------------------------------------------

In ``msys2``, the ``ln -s`` command actually creates a *copy* of the
target, *not* a symbolic link. By doing so, the build script is unable
to identify the location of the MRtrix libraries when trying to compile
an external module.

The simplest way around this is simply to invoke the build script of the main
*MRtrix3* install directly. For example, if compiling an external project called
``myproject``, residing in a folder alongside the main ``mrtrix3`` folder, the
build script can be invoked with::

    # current working directory is 'myproject':
    ../mrtrix3/build

If you really want a symbolic link, one solution is to use a standard Windows
command prompt, with Administrator priveleges: In the file explorer, go to
``C:\Windows\system32``, locate the file ``cmd.exe``, right-click and
select 'Run as administrator'. Within this prompt, use the ``mklink``
command (note that the argument order passed to ``mklink`` is reversed
with respect to ``ln -s``; i.e. provide the location of the link, *then*
the target). Make sure that you provide the *full path* to both link and
target, e.g.:

::

        mklink C:\msys64\home\username\src\my_project\build C:\msys64\home\username\src\MRtrix3\build

, and ``msys64`` should be able to interpret the softlink path correctly
(confirm with ``ls -la``).

